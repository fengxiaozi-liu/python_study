shell编程与运维
    shell脚本概述：
        通过shell中的各种命令，开发者和运维人员可以对服务器进行维护工作
        但是每次手动输入命令，工作效率太低，而且容易出错，尤其是需要维护大量的服务器时
        为了能够对服务器执行操作，我们可以将需要执行的命令写入文件，批量执行，这个文件便是shell脚本
        shell脚本一般是以.sh 结尾的文本文件，当然也可以省略扩展名
        所谓的shell编程就是把相关的命令写入一个文件之内系统性的执行

    脚本首行：
        脚本文件的第一行通过注释的方式指明执行脚本的程序

        在shell脚本中 # 开头的文本是注释，但第一句 #！ 开头的这句话比较特殊，他会告诉shell应该使用哪个程序执行当前脚本

        常见的方式：
            #！/bin/sh
            #! /bin/bash
            #! /usr/bin/env bash
        python脚本的第一句一般是 #！/usr/bin/env python

    运行脚本的方式
        bash file_name.sh
        source file_name.sh
        ./file_name.sh
            如果要以此种方式执行这个脚本，这个脚本要有可执行权限 要有x(可执行)

    关于shell中一些引号的使用
        在shell中可以使用单引号、双引号和反引号
        其中反引号`..`里面的内容会转换成shell命令执行
        单引号'...' 里面的内容会原样输出

    关于shell中的变量
        定义：
            变量的定义与其他语言的差距不大，需要注意的是赋值前后没有空格
        使用：
            使用变量时，变量名前要加上一个$符

    关于$符的使用
        1.用来取变量
            $a/${a} 用来取出变量a的值
            $1 -- $n 表示第1到第n个参数
            $*和$@ 表示列出所有的参数
            $# 表示的是参数的个数
            $? 表示命令执行的结果是否正确，如果正确返回0，如果不正确返回别的数字
        2.用来执行一个命令
            $(cmd) 表示执行一个命令
        3.用来执行一个表达式
            $((表达式)) 表示执行一个表达式

    关于shell定义一个环境变量
    1.在file_name.sh文件里面写入：
        export 变量名=值
    2.在命令窗口执行source file_name.sh
        更新一下环境变量 激活环境变量
    3.echo $变量名
        打印环境变量对应的值

    关于shell将指定的命令复制到一个指定的文件夹中的操作
        export PATH=$PATH:path（指定的文件夹的路径）
            是一个临时的，重启之后就会消失
            如果想要一直存在的话，就把上面的命令写入到~/.bashrc 最后用source ~/.bashrc 激活一下就可以了

    关于shell读取用户的输入
        read -p '提示文字' 变量名
        echo 变量名 打印一下变量名


    shell中的条件判断语句
        if [ ] ; then
            echo 命令
         else
            echo 命令
         fi
        解析：
            []号里面写的是一个测试语句，测试条件是否可以执行[  ]的前后都要加空格
            fi表示结束 就是if倒过来写表示结束

    shell中的case语句
        case $变量 in
            1）
                echo 命令
            2）
                echo 命令
            ......
            esca
        解析：
            判断变量是否邓毅一个数值 in 表示等于 其中1,2要写数值
            esca是case倒过来写表示结束

    shell中的循环语句
        shell中有三种循环for、while、until
        for i in `1 10`
        do
            相关的代码命令
        done
        解析：
            `1 10` 表示生成一个从1到10的循环体
            done 表示结束

        还有c语言风格的
        for((x=0;x<num;x++))
        do
            相关的命令
        done
        解析：
            没什么好说的


    shell中的函数
        function 函数名(){
            函数体：函数相关的代码
        }
        函数名 参数1，参数2，....
        解析：
            function可写可不写
            直接书写函数名可以调用相关的函数 在函数名的后面写上参数会自动的传递给相关的函数 这一点比较灵活

    shell中的数组
        数组名=(data1,data2,....)
        解析：
            这就是创建了一个一维数组
            要拿到数组中的某个数据是 ${数组名[num]}
            要拿到数组中的全部数据是 ${数组名[@/*]}
            要拿到数组的个数是 ${#数组名[@/*]}


