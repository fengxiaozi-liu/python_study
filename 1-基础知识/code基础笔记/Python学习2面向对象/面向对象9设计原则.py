"""
面向对象的设计原则
    遵循原则：
        SOLID设计原则
    S（Single Responsibility Principle)原则：
        定义：
            单一职责原则
            一个类只负责一项原则
        优点：
            易于维护，写出高内聚的代码
                高内聚：类里面的属性和方法是相似的
            易于代码复用
        案例（具体实现）：
            计算器设计1计算只包含加减乘除以及返回结果
                    2根据不同的情况，将结果的处理分散到其他合适的类别中去
    O（Open Closed Principle)原则
        定义：
            开放关闭原则
                对外开放
                对修改关闭
        优点：
            易于维护，保证代码的安全性以及扩展性
            安全性：修改代码不改变代码的性能
            扩展性：想要增加其他的性能只需增加相关的方法即可
        案例（具体实现）
            通过父类（基类），以及抽象等方案进行统一
    L(Liskow Substitution Principle)
        定义：
            里式替换原则：
                使用父类(基类)引用的地方必须能够使用继承类的对象来替代父类的对象
        优点：
            防止代码出现不可预知的错误
            方便针对基类的测试代码，可以用在子类上面
        案例：
            设计了一个鸟类（里面含有会飞的方法） 子类分别是燕子和鸵鸟
            那么子类燕子能够继承鸟类，而鸵鸟不能继承鸟类，如果继承就违背了里式替换原则
            解决方案：把鸟类这个父类重新划分为会飞的鸟类和不会分的鸟类，让燕子和鸵鸟分别继承
    I(Interface Segregation Priciple)
        定义：
            接口分离原则
                如果一个类包含了过多的接口方法，而这些方法在使用的过程中并非’不可分割‘，那么应该把他们进行分离
        优点：
            提高接口的重用价值
        案列：
            建立了一个父类为鸟类（包含会吃，会叫，会飞的方法）
            上述接口设计在有鸵鸟的前提下就不合理，可以采用接口分离原则
    D(Dependency Inversion Principle)
        定义：
            依赖倒置的原则
                高层模块不应该直接依赖底层模块
                他们应该依赖抽象类或者是接口
        优点：
            有利于代码维护
        案例：
            电脑类不应该依赖于鼠标类
            而是鼠标类的抽象
"""
