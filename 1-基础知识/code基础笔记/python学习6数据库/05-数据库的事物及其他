事务
    简介：
        事务主要用于处理操作量大，复杂度高，并且关联性强大的数据。
        比如说，在人员管理系统中，你删除一个成员，你既需要删除人员的基本资料，也需要删除人员的相关信息，如信箱，文章等，
        这些数据操作语句就构成了一个事务
        在MySQL中只有InnoDB存储引擎支持事务。
        事务处理可以用维护数据库的完整性，宝成成批的SQL语句要么全部执行，要么全部不执行，主要针对insert，update，delete语句而设置。
    事务的四大特性：
        在写入或者更新资料的过程中，为保证事务是正确可靠的，必须具备四个特性。
        1.原子性
            事务的所有操作要么全部完成，要么全部不完成，不会结束在中间的某个环节
            事务在执行的过程中发生错误，会被回滚到事务开始前的状态，就像事务从来没有执行过一样。
        2.一致性
            在事务开始前和事务结束以后，数据的完整性没被破坏
            这表示事务在执行过程中必须完全符合所有预设规则，这包含资料的精确度，串联性以及后续数据库可以自发性的完成预定的工作。
        3.隔离性
            并发事务相互影响的程度，比如一个事务会不会读取到另一个未提交的事务修改的数据。在事务并发操作时可能出现的问题有
            脏读：事务A修改了一个数据，但未提交，事务B读到了事务A未提交的更新结果，如果事务A提交失败，事务B读到的就是脏数据
            不可重复读：在同一个事务中，对于一份数据读取到的结果不一致。比如，事务B在事务A提前读到结果，和提交后读到的结果可能不同。
            不可重复读，出现的原因就是事务并发修改记录，要避免这种情况，最简单的方法就是要对修改的记录加锁，这回导致锁竞争加剧影响性能。
            另一种方法是通过MVCC可以在无锁的情况下避免不可重复读
            幻读：在同一个事务中，同一个查询多次返回的结果不一致
            事务隔离级别从低到高有：
                读物未提交
                读提交
                可重复读 MySQL的隔离级别
                串行化 最高隔离级别
        4.持久性
            事务处理结束后， 对数据的修改是永久的，即便系统故障也不会丢失
    语法与使用：
        开启事务：begin或start transaction
        提交事务：commit，提交会让所有修改生效
        回滚：rollback
        创建保存点：savepoint identifier
        删除保存点 release savepoint identifier
        把事务回滚到保存点 rollback to identifier
        查询事务的隔离级别 show variables like '%isolation%'
        设置事务的隔离级别 set session transaction isolation level {read uncommitted|read committed|repeatable read|
                                                                    sertalizable}

存储过程：
    存储过程是一种在数据库中存储复杂程序，以便外部程序调用的一种数据库对象。
    存储过程视为了完成特定功能的SQL语句集，经编译创建并保存在数据库中，用户通过指定存储过程的名字并给定参数(需要时)来调用执行
    存储过程思想上很简单，就是SQL语言层面的代码封装与重用。
    语法：
        1.声明语句结束符，可自定义
            delimiter $$
            或者
            delimiter //
        2.声明存储过程
            create procedure demo in parameter(IN p in int)
        3.存储过程开始和结束符
            begin...end
        4.变量赋值
            set @p_in=1
sql注入
    这是一个问题,会把输入的信息给注释掉

数据库备份与恢复：
    备份
        mysqldump -h localhost -uroot -p dbname > dbname.sql
    恢复：
        mysql -h localhost -uroot -p dbname<./dbname.sql

