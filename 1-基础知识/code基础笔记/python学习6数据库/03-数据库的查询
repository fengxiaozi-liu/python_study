MySQL数据库中关于表常用的查询语句
    1.select 表达式
        select 既可以查询也可以输出
        select rand()  生成一个随机数
        select unix_timestamp() 显示unix的时间戳

    2.from子句
        语法：select 字段 from 表名
            from 后面是数据源，数据源可以写多个，数据源一般是表名，也可以是其他查询的结果
        exp：
            select student.name,score.math from student,score;
    3.where子句
        语法：select 字段 from 表名 where 条件；
            where是做条件判断的只返回Ture结果的数据
        exp：
            select name from student where id=1;
    4.having子句
        语法：select 字段 from 表名 having id=1
            having和where功能类似，都可以采用来实现条件查询。很多情况下可以使用where或者having，甚至可以混合使用
        exp：
            select id,name from student having id=1;
        where和having的区别：
            都能使用的场景：
                select id,name from student where id=1;
                select id,name from student having id=1;
            只能使用where的场景：
                select name from student where id=1;
                    这里使用where就可以但是使用having不行
                    因为having只能搜索select后面出现的字段，但是where可以搜索表格中的全部字段
                    having后面可以跟一个聚合函数，where后面不可以有聚合函数
    5.as子句
        语法:select 字段 as '别名' from 表名 where 条件
            as 能够给表中的字段起一个别名
        exp:
            select id as '编号', name as '姓名' from student where name='zhangsan';
                这里的where不能使用别名查询
            select id as '编号', name as '姓名' from student having 姓名='zhangsan';
                having可以使用起的别名来查询

    6.group by子句
        按照某一字段进行分组，会把该字段中值相同的归为一组，将查询的结果分类显示，方便统计
        如果有where和having应该放在where和having的前面
        语法：select 字段 from 表名 group by 分组字段;
        exp:
            select sex,count(id) from student group by sex;
                在group by 通过聚合函数进行拼接
            select sex,group_concat(name) from student group by sex

    7.order by子句
        order by的主要作用是排序
        order by放在group by的后面
        语法：select 字段 from 表名 order by 排序字段 asc|desc
            asc为升序，desc为降序 默认为asc升序排序
        exp：
            select * from student order by age
            select * from student order by age desc

    8.limit子句
        limit限制取出的数量
        语法：select 字段 from 表名 limit m           取出从第1行到第m行的数据
             select 字段 from 表名 limit m,n         从第m+1行开始去向下取n行
             select 字段 from 表名 limit m offset n  跳过前n行取后面的m行

    9.distinct子句
        distinct的作用是去重
        语法：select distinct 字段 from 表名
        exp：
            select distinct city from student;

    10.dual子句
        dual是一个续表是为了保证语句的完整性
        exp：
            select 4+5 from dual;

MySQL数据库中的多表查询
    union联合查询
        union操作符用于合并两个或者多个select语句效果集
        union要求：
            两边select语句字段列数必须一样
            两边可以具有不用数据类型的字段
            字段默认按照左边的表来设置
        语法：select 表1.字段1 from 表1 union select 表2.字段2 from 表2
        exp：
            select id,age,name from student union select * from score;

    inner join取交集：
        语法：表1 inner join 表2 on 条件
            inner join 是取出表1，表2，条件一致的交集部分，如果没有on就变成了笛卡尔积
        exp：
            select student.id,student.name,student.age from student inner join score on student.id=score.id;

    left join左连接
        语法：表1 left join 表2 on 条件
            left join是取出左边表的全部，右边的表没有就选择空
        exp:
            select student.id,student.name,student.age from student inner join score on student.id=score.id;

    right join连接
        语法：表1 left join 表2 on 条件
            right join 是取出右边表的全部，左边表没有就选择空
        exp:
            select student.id,student.name,student.age from student inner join score on student.id=score.id;

    子查询语句：
        语法：select 字段1 from 表1 where 字段2 in(select 字段2 from 表2 where 条件)
        exp:
            select name from student id in (select id from score where math>67);

    视图表
        创建：
            语法：1.create view view_name as select(查询结果的内容)  默认是可以修改的表
                 2.create algorithm=temptable view view_name as select(查询的内容) 这样创建的视图表是不允许修改的
        应用：
            语法：1.select 查询的内容 where 字段 in (select 字段 from view_name);
                 2.select 字段 from view_name;
                    视图表的数据会随着原表的改动而改动
                    改动视图表会影响到
        删除：
            drop view view_name




MySQL数据库中内置函数(聚合函数)
    作用：把表中的多个数据拼接到一起
    常用的聚合函数
        group_concat(字段) 返回某一字段中连接的字符串
        count(字段) 计算某一字段的个数
        char_length(字段) 计算一个字段的的长度
        sum(字段) 计算某一字段的总和
        avg(字段) 计算某一字段的平均值
        max(字段) 返回某一字段的最大值
        min(字段) 返回某一字段的最小值
        json_array(字段) 将结果集作为单个json数组返回
        json_object(字段) 将结果集作为单个json对象返回
    数值计算的聚合函数：
        abs(x)        返回x的绝对值
        ceil(x)       返回大于x的最大整数值
        floor(x)      返回小于x的最大整数值
        mod(x,y)      返回x/y的模
        rand()        返回0-1内的随机数
        round(x,y)    返回参数x的四舍五入有y位小数的值
        truncate(x,y) 返回数字截断y位小数的结果
    日期计算类聚合函数：
        now()                    返回当前日期的时间
        datediff('日期1','日期2') 返回计算日期的差
        year('日期时间')          返回当前日期里面的年份
        week('日期时间')          返回当前的日期里面一年中的第几周
        hour('日期时间')        返回当前日期里面的第几小时
    字符串相关的聚合函数：
        lower(字符串)  大写变小写
        upper(字符串)  小写变大写
    其他相关的聚合函数：
        database()      返回数据库
        versions()      返回当前数据库的版本
        users()         返回当前登录的用户名
        inet_aton(ip)   返回ip地址的数字代表
        inet_ntoa(num)  返回数字代表的ip地址
        password()      返回字符串加密的版本
        md5()           返回字符串str的md5值
