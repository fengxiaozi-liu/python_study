"""
算法概念
    algorithm：一个计算过程，解决问题的方法
    Niklaus Wirth: 程序=数据结构+算法
时间复杂度
    时间复杂度是用来估计算法运行时间的一个式子(单位)
    一般来说，时间复杂度高的算法比时间复杂度高的算法慢
    常见的时间复杂度：
        o(1) < o(logn) < o(n) < o(nlogn) < o(n^2) < o(n^2logn) < o(n^3)
    复杂问题的时间复杂度
        o(n!) o(2^n) o(n^n)
    o(n) o:一个公式的上界，可以理解为大约的意思 () 里面表示公式 1 n n^2 n^3 logn是单位
空间复杂度
    空间复杂度：用来评估算法内存占用大小的式子
    空间复杂度的表示方式与时间复杂度完全一样
    算法使用了几个变量是o(1)
    使用了长度为n的一维列表o(n)
    算法使用了m行n列的列表：o(nm)
    现在重要的是空间换时间
递归
    汉诺塔问题

"""


def hanoi(n, a, b, c):
    """
    汉诺塔问题
    :param n:
    :param a:
    :param b:
    :param c:
    :return:
    """
    if n > 0:
        hanoi(n - 1, a, c, b)
        print(f'从{a}移动到{c}')
        hanoi(n - 1, b, a, c)


hanoi(2, 'A', 'B', 'C')

